networks:
  favorite-places:

services:
  # GraphQL API Gateway
  favorite-places-gateway:
    build: ./graphql
    container_name: favorite-places-gateway
    command: flask --debug run --host=0.0.0.0 --port=8000
    ports:
      - "8000:8000"
    volumes:
      - ./graphql/src:/src
      - ./graphql/docs:/docs
    env_file:
      - graphql/.env
    networks:
      - favorite-places

  # сервис приложения FastAPI
  favorite-places-app:
    build: ./favorite-places
    container_name: favorite-places-app
    command: uvicorn main:app --log-config logging.conf --reload --host 0.0.0.0 --port=8000
    hostname: favorite-places-app.net
    ports:
      - "8010:8000"
    volumes:
      - ./favorite-places/src:/src
      - ./favorite-places/docs:/docs
    env_file:
      - ./favorite-places/.env
    depends_on:
      favorite-places-db:
        condition: service_healthy
    networks:
      - favorite-places

  # сервис СУБД PostgreSQL
  favorite-places-db:
    image: postgres:15-alpine
    container_name: favorite-places-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB_PLACES}
      - POSTGRES_USER=${POSTGRES_USER_PLACES}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_PLACES}
    ports:
      - "54320:5432"
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck
    healthcheck:
      # https://www.postgresql.org/docs/current/app-pg-isready.html
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - favorite-places

  countries-informer-app:
    build: ./countries-informer
    container_name: countries-informer-app
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8020:8000"
    volumes:
      - ./countries-informer/src:/src
      - ./countries-informer/docs:/docs
    env_file:
      - ./countries-informer/.env
    depends_on:
      countries-informer-db:
        condition: service_healthy
    restart: on-failure
    networks:
      - favorite-places

  # СУБД PostgreSQL
  countries-informer-db:
    image: postgres:15-alpine
    container_name: countries-informer-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB_COUNTRIES}
      - POSTGRES_USER=${POSTGRES_USER_COUNTRIES}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_COUNTRIES}
    ports:
      - "54321:5432"
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck
    healthcheck:
      # https://www.postgresql.org/docs/current/app-pg-isready.html
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    networks:
      - favorite-places


  # СУБД Redis (кэширование и брокер сообщений для Celery)
  countries-informer-redis:
    image: redis:7-alpine
    container_name: countries-informer-redis
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    restart: on-failure
    networks:
      - favorite-places

  # сервис распределенной очереди задач Celery
  countries-informer-celery:
    build: ./countries-informer
    container_name: countries-informer-celery
    command: celery -A app worker --loglevel=info
    volumes:
      - ./countries-informer/src:/src
    env_file:
      - ./countries-informer/.env
    depends_on:
      countries-informer-redis:
        condition: service_started
      countries-informer-db:
        condition: service_healthy
    restart: on-failure
    networks:
      - favorite-places

  # сервис для выполнения периодических заданий Celery Beat
  countries-informer-celery-beat:
    build: ./countries-informer
    container_name: countries-informer-celery-beat
    command: celery -A app beat -l info -S django --pidfile=/tmp/celerybeat.pid --schedule=/tmp/celerybeat-schedule
    volumes:
      - ./countries-informer/src:/src
    env_file:
      - ./countries-informer/.env
    depends_on:
      countries-informer-redis:
        condition: service_started
      countries-informer-db:
        condition: service_healthy
      countries-informer-celery:
        condition: service_started
    tmpfs: /tmp
    restart: on-failure
    networks:
      - favorite-places

  # мониторинг периодических задач Flower
  countries-informer-flower:
    image: mher/flower:0.9.7
    container_name: countries-informer-flower
    command: [ "flower", "--broker=redis://countries-informer-redis:6379", "--port=5555" ]
    ports:
      - "5555:5555"
    depends_on:
      countries-informer-redis:
        condition: service_started
    restart: on-failure
    networks:
      - favorite-places

  # брокер сообщений RabbitMQ (коммуникации между микросервисами)
  countries-informer-rabbitmq:
    image: bitnami/rabbitmq:3.11.3
    container_name: countries-informer-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_MANAGEMENT_SSL_VERIFY=verify_none
    healthcheck:
      test: rabbitmq-diagnostics -q check_virtual_hosts
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - favorite-places

  # очередь для приема сообщений
  countries-informer-consumer:
    build: ./countries-informer
    container_name: countries-informer-consumer
    command: python manage.py runconsumer ${RABBITMQ_QUEUE_PLACES_IMPORT}
    env_file:
      - ./countries-informer/.env
    depends_on:
      countries-informer-rabbitmq:
        condition: service_healthy
    restart: on-failure
    networks:
      - favorite-places